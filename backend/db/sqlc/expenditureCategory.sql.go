// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: expenditureCategory.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExpenditureCategory = `-- name: CreateExpenditureCategory :one
INSERT INTO expenditureCategory (name)
VALUES ($1)
RETURNING id, name, createdat, updatedat
`

func (q *Queries) CreateExpenditureCategory(ctx context.Context, name string) (Expenditurecategory, error) {
	row := q.db.QueryRow(ctx, createExpenditureCategory, name)
	var i Expenditurecategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteExpenditureCategory = `-- name: DeleteExpenditureCategory :one
DELETE FROM expenditureCategory
WHERE name = $1
RETURNING id, name, createdat, updatedat
`

func (q *Queries) DeleteExpenditureCategory(ctx context.Context, name string) (Expenditurecategory, error) {
	row := q.db.QueryRow(ctx, deleteExpenditureCategory, name)
	var i Expenditurecategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getExpenditureCategories = `-- name: GetExpenditureCategories :many
SELECT id, name, createdat, updatedat
FROM expenditureCategory
`

func (q *Queries) GetExpenditureCategories(ctx context.Context) ([]Expenditurecategory, error) {
	rows, err := q.db.Query(ctx, getExpenditureCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expenditurecategory{}
	for rows.Next() {
		var i Expenditurecategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenditureCategoryById = `-- name: GetExpenditureCategoryById :one
SELECT id, name, createdat, updatedat
FROM expenditureCategory
WHERE id = $1
`

func (q *Queries) GetExpenditureCategoryById(ctx context.Context, id uuid.UUID) (Expenditurecategory, error) {
	row := q.db.QueryRow(ctx, getExpenditureCategoryById, id)
	var i Expenditurecategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateExpenditureCategory = `-- name: UpdateExpenditureCategory :one
UPDATE expenditureCategory
SET name = $1,
    updatedAt = NOW()
WHERE name = $2
RETURNING id, name, createdat, updatedat
`

type UpdateExpenditureCategoryParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateExpenditureCategory(ctx context.Context, arg UpdateExpenditureCategoryParams) (Expenditurecategory, error) {
	row := q.db.QueryRow(ctx, updateExpenditureCategory, arg.Name, arg.Name_2)
	var i Expenditurecategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
